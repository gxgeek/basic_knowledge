//‰∏Ä‰∏™Êú∫Âô®‰∫∫‰Ωç‰∫é‰∏Ä‰∏™ m x n ÁΩëÊ†ºÁöÑÂ∑¶‰∏äËßí ÔºàËµ∑ÂßãÁÇπÂú®‰∏ãÂõæ‰∏≠Ê†áËÆ∞‰∏∫‚ÄúStart‚Äù Ôºâ„ÄÇ 
//
// Êú∫Âô®‰∫∫ÊØèÊ¨°Âè™ËÉΩÂêë‰∏ãÊàñËÄÖÂêëÂè≥ÁßªÂä®‰∏ÄÊ≠•„ÄÇÊú∫Âô®‰∫∫ËØïÂõæËææÂà∞ÁΩëÊ†ºÁöÑÂè≥‰∏ãËßíÔºàÂú®‰∏ãÂõæ‰∏≠Ê†áËÆ∞‰∏∫‚ÄúFinish‚ÄùÔºâ„ÄÇ 
//
// Áé∞Âú®ËÄÉËôëÁΩëÊ†º‰∏≠ÊúâÈöúÁ¢çÁâ©„ÄÇÈÇ£‰πà‰ªéÂ∑¶‰∏äËßíÂà∞Âè≥‰∏ãËßíÂ∞Ü‰ºöÊúâÂ§öÂ∞ëÊù°‰∏çÂêåÁöÑË∑ØÂæÑÔºü 
//
// 
//
// ÁΩëÊ†º‰∏≠ÁöÑÈöúÁ¢çÁâ©ÂíåÁ©∫‰ΩçÁΩÆÂàÜÂà´Áî® 1 Âíå 0 Êù•Ë°®Á§∫„ÄÇ 
//
// ËØ¥ÊòéÔºöm Âíå n ÁöÑÂÄºÂùá‰∏çË∂ÖËøá 100„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ËæìÂÖ•:
//[
//¬† [0,0,0],
//¬† [0,1,0],
//¬† [0,0,0]
//]
//ËæìÂá∫: 2
//Ëß£Èáä:
//3x3 ÁΩëÊ†ºÁöÑÊ≠£‰∏≠Èó¥Êúâ‰∏Ä‰∏™ÈöúÁ¢çÁâ©„ÄÇ
//‰ªéÂ∑¶‰∏äËßíÂà∞Âè≥‰∏ãËßí‰∏ÄÂÖ±Êúâ 2 Êù°‰∏çÂêåÁöÑË∑ØÂæÑÔºö
//1. ÂêëÂè≥ -> ÂêëÂè≥ -> Âêë‰∏ã -> Âêë‰∏ã
//2. Âêë‰∏ã -> Âêë‰∏ã -> ÂêëÂè≥ -> ÂêëÂè≥
// 
// Related Topics Êï∞ÁªÑ Âä®ÊÄÅËßÑÂàí 
// üëç 385 üëé 0


package com.gxgeek.leetcode.editor.cn;
//JavaÔºö‰∏çÂêåË∑ØÂæÑ II
////‰∏Ä‰∏™Êú∫Âô®‰∫∫‰Ωç‰∫é‰∏Ä‰∏™ m x n ÁΩëÊ†ºÁöÑÂ∑¶‰∏äËßí ÔºàËµ∑ÂßãÁÇπÂú®‰∏ãÂõæ‰∏≠Ê†áËÆ∞‰∏∫‚ÄúStart‚Äù Ôºâ„ÄÇ 
//
// Êú∫Âô®‰∫∫ÊØèÊ¨°Âè™ËÉΩÂêë‰∏ãÊàñËÄÖÂêëÂè≥ÁßªÂä®‰∏ÄÊ≠•„ÄÇÊú∫Âô®‰∫∫ËØïÂõæËææÂà∞ÁΩëÊ†ºÁöÑÂè≥‰∏ãËßíÔºàÂú®‰∏ãÂõæ‰∏≠Ê†áËÆ∞‰∏∫‚ÄúFinish‚ÄùÔºâ„ÄÇ 
//
// Áé∞Âú®ËÄÉËôëÁΩëÊ†º‰∏≠ÊúâÈöúÁ¢çÁâ©„ÄÇÈÇ£‰πà‰ªéÂ∑¶‰∏äËßíÂà∞Âè≥‰∏ãËßíÂ∞Ü‰ºöÊúâÂ§öÂ∞ëÊù°‰∏çÂêåÁöÑË∑ØÂæÑÔºü 
//
// 
//
// ÁΩëÊ†º‰∏≠ÁöÑÈöúÁ¢çÁâ©ÂíåÁ©∫‰ΩçÁΩÆÂàÜÂà´Áî® 1 Âíå 0 Êù•Ë°®Á§∫„ÄÇ 
//
// ËØ¥ÊòéÔºöm Âíå n ÁöÑÂÄºÂùá‰∏çË∂ÖËøá 100„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ËæìÂÖ•:
//[
//¬† [0,0,0],
//¬† [0,1,0],
//¬† [0,0,0]
//]
//ËæìÂá∫: 2
//Ëß£Èáä:
//3x3 ÁΩëÊ†ºÁöÑÊ≠£‰∏≠Èó¥Êúâ‰∏Ä‰∏™ÈöúÁ¢çÁâ©„ÄÇ
//‰ªéÂ∑¶‰∏äËßíÂà∞Âè≥‰∏ãËßí‰∏ÄÂÖ±Êúâ 2 Êù°‰∏çÂêåÁöÑË∑ØÂæÑÔºö
//1. ÂêëÂè≥ -> ÂêëÂè≥ -> Âêë‰∏ã -> Âêë‰∏ã
//2. Âêë‰∏ã -> Âêë‰∏ã -> ÂêëÂè≥ -> ÂêëÂè≥
// 
// Related Topics Êï∞ÁªÑ Âä®ÊÄÅËßÑÂàí 
// üëç 385 üëé 0

public class GX_63_UniquePathsIi {
    public static void main(String[] args) {
        Solution solution = new GX_63_UniquePathsIi().new Solution();
        // TO TEST
//        solution.uniquePathsWithObstacles(new int[][]{{0, 1}});
        solution.uniquePathsWithObstacles(new int[][]{{0,0,0},{0,1,0},{0,0,0}});
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public int uniquePathsWithObstacles(int[][] obstacleGrid) {
            if (obstacleGrid.length < 0 || obstacleGrid[0].length < 0) {
                return 0;
            }

            int col = obstacleGrid[0].length;
            int row = obstacleGrid.length;
            int[][] dp = new int[row][col];
            for (int i = col - 1; i >= 0; i--) {
                if (obstacleGrid[row - 1][i] != 1) {
                    if (i < col - 1 && dp[row - 1][i + 1] == 1) {
                        dp[row - 1][i] = 1;
                    } else if (i == col - 1){
                        dp[row - 1][i] = 1;
                    }
                }
            }
            for (int i = row - 1; i >= 0; i--) {
                if (obstacleGrid[i][col - 1] != 1) {
                    if (i< row - 1 && dp[i+1][col - 1] ==1){
                        dp[i][col - 1] = 1;
                    }else if(i == row - 1 ){
                        dp[i][col - 1] = 1;
                    }
                }
            }


            for (int i = dp.length - 2; i >= 0; i--) {
                for (int j = dp[0].length - 2; j >= 0; j--) {
                    if (obstacleGrid[i][j] == 1) {
                        dp[i][j] = 0;
                    } else {
                        dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
                    }
                }
            }
            return dp[0][0];

        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
